import { pool } from '../../src/database/CarmineDB'; 

export async function testUniqueConstraint() {
    const userEmail = "test@example.com";
  
    try {
      // First insert: This should succeed with random UUID generated by PostgreSQL
      await pool.query(
        "INSERT INTO users (user_id, user_email, user_password, user_name) VALUES (gen_random_uuid(), $1, $2, $3)",
        [userEmail, "password123", "Test User"]
      );
      console.log("First insert successful");
  
      // Second insert with the same email: This should fail due to the unique constraint
      try {
        await pool.query(
          "INSERT INTO users (user_id, user_email, user_password, user_name) VALUES (gen_random_uuid(), $1, $2, $3)",
          [userEmail, "password456", "Another User"]
        );
      } catch (error: unknown) {
        // Type narrowing to 'Error' to access 'message'
        if (error instanceof Error && error.message.includes('duplicate key value violates unique constraint')) {
          console.log("Unique constraint test passed: Duplicate email insertion was blocked.");
        } else {
          console.log("Error with unique constraint:", error instanceof Error ? error.message : 'Unknown error');
        }
      }
    } catch (error: unknown) {
      // TypeScript error handling for unknown type
      if (error instanceof Error) {
        console.log("Error during first insert:", error.message);
      } else {
        console.log("Unexpected error type:", error);
      }
    } finally {
      // Cleanup: Delete the test user by email
      try {
        await pool.query("DELETE FROM users WHERE user_email = $1", [userEmail]);
        console.log("Test data cleaned up: User deleted.");
      } catch (cleanupError) {
        console.log("Error during cleanup:", cleanupError);
      }
    }
  }

  